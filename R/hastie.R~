reweight <- function(fam,weights){
    famname <-fam$name
    a <- attributes(fam)
    n <- length(a[["_weights"]])
if(length(weights)!=n)stop("replacement weight vector has to have same length as weight vector on object")
    weights <- weights/sum(weights)
    switch(famname,
           "gaussian" = glm.gaussian(
               y = a[["_y"]],
               weights = weights,
               opt = a[["_opt"]]
           ),
           "binomial_logit" = glm.binomial(
               y = a[["_y"]],
               weights = weights,
               link = "logit"
           ),
           "binomial_probit" = glm.binomial(
               y = a[["_y"]],
               weights = weights,
               link = "probit"
           ),
           "cox" = glm.cox(
               start = a[["_start"]],
               stop = a[["_stop"]],
               status = a[["_status"]],
               weights = weights,
               tie_method = a[["_tie_method"]]
           ),
           "multigaussian"= glm.multigaussian(
               y = a[["_y"]],
               weights = weights,
               opt = a[["_opt"]]
           ),
           "multinomial" = glm.multinomial(
               y = a[["_y"]],
               weights = weights
           ),
           "poisson" = glm.poisson(
               y = a[["_y"]],
               weights = weights
           )
           )
}
print.grpnet <- function (x, digits = max(3, getOption("digits") - 3), ...)
{
    cat("\nCall: ", deparse(x$call), "\n\n")
    state = x$state
    Df = rowSums(state$betas!=0)
    dev.ratio = state$devs
    lambdas=state$lmdas
    out = data.frame(Df, `%Dev` = round(dev.ratio *
        100, 2), Lambda = signif(lambdas, digits), check.names = FALSE,
        row.names = seq(along = Df))
    class(out) = c("anova", class(out))
    print(out)
}








